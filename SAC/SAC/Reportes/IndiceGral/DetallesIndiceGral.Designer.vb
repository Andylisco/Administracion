'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System.CodeDom.Compiler
Imports System.ComponentModel
Imports System.ComponentModel.Design
Imports System.IO
Imports System.Runtime.Serialization
Imports System.Xml
Imports System.Xml.Schema
Imports System.Xml.Serialization


'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Serializable(), _
 DesignerCategory("code"), _
 ToolboxItem(True), _
 XmlSchemaProvider("GetTypedDataSetSchema"), _
 XmlRoot("DetallesIndiceGral"), _
 HelpKeyword("vs.data.DataSet")> _
Partial Public Class DetallesIndiceGral
    Inherits DataSet

    Private tableDetalles As DetallesDataTable

    Private _schemaSerializationMode As SchemaSerializationMode = SchemaSerializationMode.IncludeSchema

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = SchemaSerializationMode.IncludeSchema) Then
            Dim ds As DataSet = New DataSet()
            ds.ReadXmlSchema(New XmlTextReader(New StringReader(strSchema)))
            If (Not (ds.Tables("Detalles")) Is Nothing) Then
                MyBase.Tables.Add(New DetallesDataTable(ds.Tables("Detalles")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New XmlTextReader(New StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Browsable(False), _
     DesignerSerializationVisibility(DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Detalles() As DetallesDataTable
        Get
            Return Me.tableDetalles
        End Get
    End Property

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Browsable(True), _
     DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(ByVal value As SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overrides Function Clone() As DataSet
        Dim cln As DetallesIndiceGral = CType(MyBase.Clone, DetallesIndiceGral)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As DataSet = New DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("Detalles")) Is Nothing) Then
                MyBase.Tables.Add(New DetallesDataTable(ds.Tables("Detalles")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function GetSchemaSerializable() As XmlSchema
        Dim stream As MemoryStream = New MemoryStream()
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDetalles = CType(MyBase.Tables("Detalles"), DetallesDataTable)
        If (initTable = True) Then
            If (Not (Me.tableDetalles) Is Nothing) Then
                Me.tableDetalles.InitVars()
            End If
        End If
    End Sub

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitClass()
        Me.DataSetName = "DetallesIndiceGral"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DetallesIndiceGral.xsd"
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema
        Me.tableDetalles = New DetallesDataTable()
        MyBase.Tables.Add(Me.tableDetalles)
    End Sub

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function ShouldSerializeDetalles() As Boolean
        Return False
    End Function

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As CollectionChangeEventArgs)
        If (e.Action = CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <DebuggerNonUserCode(), _
     GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As XmlSchemaSet) As XmlSchemaComplexType
        Dim ds As DetallesIndiceGral = New DetallesIndiceGral()
        Dim type As XmlSchemaComplexType = New XmlSchemaComplexType()
        Dim sequence As XmlSchemaSequence = New XmlSchemaSequence()
        Dim any As XmlSchemaAny = New XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As MemoryStream = New MemoryStream()
            Dim s2 As MemoryStream = New MemoryStream()
            Try
                Dim schema As XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    <GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Delegate Sub DetallesRowChangeEventHandler(ByVal sender As Object, ByVal e As DetallesRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Serializable(), _
     XmlSchemaProvider("GetTypedTableSchema")> _
    Partial Public Class DetallesDataTable
        Inherits TypedTableBase(Of DetallesRow)

        Private columnClave As DataColumn

        Private columnTipo As DataColumn

        Private columnAño As DataColumn

        Private columnNro As DataColumn

        Private columnFecha As DataColumn

        Private columnEstado As DataColumn

        Private columnTitulo As DataColumn

        Private columnReferencia As DataColumn

        Private columnCentro As DataColumn

        Private columnOrigen As DataColumn

        Private columnEmisor As DataColumn

        Private columnResponsable As DataColumn

        Private columnidTipo As DataColumn

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Detalles"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ClaveColumn() As DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property TipoColumn() As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AñoColumn() As DataColumn
            Get
                Return Me.columnAño
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property NroColumn() As DataColumn
            Get
                Return Me.columnNro
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property FechaColumn() As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property EstadoColumn() As DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property TituloColumn() As DataColumn
            Get
                Return Me.columnTitulo
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ReferenciaColumn() As DataColumn
            Get
                Return Me.columnReferencia
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property CentroColumn() As DataColumn
            Get
                Return Me.columnCentro
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property OrigenColumn() As DataColumn
            Get
                Return Me.columnOrigen
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property EmisorColumn() As DataColumn
            Get
                Return Me.columnEmisor
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property ResponsableColumn() As DataColumn
            Get
                Return Me.columnResponsable
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property idTipoColumn() As DataColumn
            Get
                Return Me.columnidTipo
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As DetallesRow
            Get
                Return CType(Me.Rows(index), DetallesRow)
            End Get
        End Property

        <GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event DetallesRowChanging As DetallesRowChangeEventHandler

        <GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event DetallesRowChanged As DetallesRowChangeEventHandler

        <GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event DetallesRowDeleting As DetallesRowChangeEventHandler

        <GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event DetallesRowDeleted As DetallesRowChangeEventHandler

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub AddDetallesRow(ByVal row As DetallesRow)
            Me.Rows.Add(row)
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function AddDetallesRow(ByVal Clave As String, ByVal Tipo As String, ByVal Año As Short, ByVal Nro As Short, ByVal Fecha As String, ByVal Estado As String, ByVal Titulo As String, ByVal Referencia As String, ByVal Centro As String, ByVal Origen As String, ByVal Emisor As String, ByVal Responsable As String, ByVal idTipo As Integer) As DetallesRow
            Dim rowDetallesRow As DetallesRow = CType(Me.NewRow, DetallesRow)
            Dim columnValuesArray() As Object = New Object() {Clave, Tipo, Año, Nro, Fecha, Estado, Titulo, Referencia, Centro, Origen, Emisor, Responsable, idTipo}
            rowDetallesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDetallesRow)
            Return rowDetallesRow
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As DataTable
            Dim cln As DetallesDataTable = CType(MyBase.Clone, DetallesDataTable)
            cln.InitVars()
            Return cln
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As DataTable
            Return New DetallesDataTable()
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnAño = MyBase.Columns("Año")
            Me.columnNro = MyBase.Columns("Nro")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnTitulo = MyBase.Columns("Titulo")
            Me.columnReferencia = MyBase.Columns("Referencia")
            Me.columnCentro = MyBase.Columns("Centro")
            Me.columnOrigen = MyBase.Columns("Origen")
            Me.columnEmisor = MyBase.Columns("Emisor")
            Me.columnResponsable = MyBase.Columns("Responsable")
            Me.columnidTipo = MyBase.Columns("idTipo")
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columnClave = New DataColumn("Clave", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnTipo = New DataColumn("Tipo", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnAño = New DataColumn("Año", GetType(Short), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnAño)
            Me.columnNro = New DataColumn("Nro", GetType(Short), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnNro)
            Me.columnFecha = New DataColumn("Fecha", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnEstado = New DataColumn("Estado", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnTitulo = New DataColumn("Titulo", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnTitulo)
            Me.columnReferencia = New DataColumn("Referencia", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnReferencia)
            Me.columnCentro = New DataColumn("Centro", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnCentro)
            Me.columnOrigen = New DataColumn("Origen", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigen)
            Me.columnEmisor = New DataColumn("Emisor", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnEmisor)
            Me.columnResponsable = New DataColumn("Responsable", GetType(String), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnResponsable)
            Me.columnidTipo = New DataColumn("idTipo", GetType(Integer), Nothing, MappingType.Element)
            MyBase.Columns.Add(Me.columnidTipo)
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function NewDetallesRow() As DetallesRow
            Return CType(Me.NewRow, DetallesRow)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DetallesRow(builder)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Type
            Return GetType(DetallesRow)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetallesRowChangedEvent) Is Nothing) Then
                RaiseEvent DetallesRowChanged(Me, New DetallesRowChangeEvent(CType(e.Row, DetallesRow), e.Action))
            End If
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetallesRowChangingEvent) Is Nothing) Then
                RaiseEvent DetallesRowChanging(Me, New DetallesRowChangeEvent(CType(e.Row, DetallesRow), e.Action))
            End If
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetallesRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetallesRowDeleted(Me, New DetallesRowChangeEvent(CType(e.Row, DetallesRow), e.Action))
            End If
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetallesRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetallesRowDeleting(Me, New DetallesRowChangeEvent(CType(e.Row, DetallesRow), e.Action))
            End If
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub RemoveDetallesRow(ByVal row As DetallesRow)
            Me.Rows.Remove(row)
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As XmlSchemaSet) As XmlSchemaComplexType
            Dim type As XmlSchemaComplexType = New XmlSchemaComplexType()
            Dim sequence As XmlSchemaSequence = New XmlSchemaSequence()
            Dim ds As DetallesIndiceGral = New DetallesIndiceGral()
            Dim any1 As XmlSchemaAny = New XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As XmlSchemaAny = New XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As XmlSchemaAttribute = New XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As XmlSchemaAttribute = New XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetallesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As MemoryStream = New MemoryStream()
                Dim s2 As MemoryStream = New MemoryStream()
                Try
                    Dim schema As XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DetallesRow
        Inherits DataRow

        Private tableDetalles As DetallesDataTable

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetalles = CType(Me.Table, DetallesDataTable)
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Clave() As String
            Get
                Try
                    Return CType(Me(Me.tableDetalles.ClaveColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Clave' in table 'Detalles' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDetalles.ClaveColumn) = value
            End Set
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Tipo() As String
            Get
                Try
                    Return CType(Me(Me.tableDetalles.TipoColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Tipo' in table 'Detalles' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDetalles.TipoColumn) = value
            End Set
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Año() As Short
            Get
                Try
                    Return CType(Me(Me.tableDetalles.AñoColumn), Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Año' in table 'Detalles' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Short)
                Me(Me.tableDetalles.AñoColumn) = value
            End Set
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Nro() As Short
            Get
                Try
                    Return CType(Me(Me.tableDetalles.NroColumn), Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Nro' in table 'Detalles' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Short)
                Me(Me.tableDetalles.NroColumn) = value
            End Set
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Fecha() As String
            Get
                Try
                    Return CType(Me(Me.tableDetalles.FechaColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Fecha' in table 'Detalles' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDetalles.FechaColumn) = value
            End Set
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Estado() As String
            Get
                Try
                    Return CType(Me(Me.tableDetalles.EstadoColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Estado' in table 'Detalles' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDetalles.EstadoColumn) = value
            End Set
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Titulo() As String
            Get
                Try
                    Return CType(Me(Me.tableDetalles.TituloColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Titulo' in table 'Detalles' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDetalles.TituloColumn) = value
            End Set
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Referencia() As String
            Get
                Try
                    Return CType(Me(Me.tableDetalles.ReferenciaColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Referencia' in table 'Detalles' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDetalles.ReferenciaColumn) = value
            End Set
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Centro() As String
            Get
                Try
                    Return CType(Me(Me.tableDetalles.CentroColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Centro' in table 'Detalles' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDetalles.CentroColumn) = value
            End Set
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Origen() As String
            Get
                Try
                    Return CType(Me(Me.tableDetalles.OrigenColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Origen' in table 'Detalles' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDetalles.OrigenColumn) = value
            End Set
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Emisor() As String
            Get
                Try
                    Return CType(Me(Me.tableDetalles.EmisorColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Emisor' in table 'Detalles' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDetalles.EmisorColumn) = value
            End Set
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Responsable() As String
            Get
                Try
                    Return CType(Me(Me.tableDetalles.ResponsableColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'Responsable' in table 'Detalles' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As String)
                Me(Me.tableDetalles.ResponsableColumn) = value
            End Set
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property idTipo() As Integer
            Get
                Try
                    Return CType(Me(Me.tableDetalles.idTipoColumn), Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("The value for column 'idTipo' in table 'Detalles' is DBNull.", e)
                End Try
            End Get
            Set(ByVal value As Integer)
                Me(Me.tableDetalles.idTipoColumn) = value
            End Set
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tableDetalles.ClaveColumn)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetClaveNull()
            Me(Me.tableDetalles.ClaveColumn) = Convert.DBNull
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableDetalles.TipoColumn)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetTipoNull()
            Me(Me.tableDetalles.TipoColumn) = Convert.DBNull
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsAñoNull() As Boolean
            Return Me.IsNull(Me.tableDetalles.AñoColumn)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetAñoNull()
            Me(Me.tableDetalles.AñoColumn) = Convert.DBNull
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsNroNull() As Boolean
            Return Me.IsNull(Me.tableDetalles.NroColumn)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetNroNull()
            Me(Me.tableDetalles.NroColumn) = Convert.DBNull
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableDetalles.FechaColumn)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetFechaNull()
            Me(Me.tableDetalles.FechaColumn) = Convert.DBNull
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tableDetalles.EstadoColumn)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetEstadoNull()
            Me(Me.tableDetalles.EstadoColumn) = Convert.DBNull
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsTituloNull() As Boolean
            Return Me.IsNull(Me.tableDetalles.TituloColumn)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetTituloNull()
            Me(Me.tableDetalles.TituloColumn) = Convert.DBNull
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsReferenciaNull() As Boolean
            Return Me.IsNull(Me.tableDetalles.ReferenciaColumn)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetReferenciaNull()
            Me(Me.tableDetalles.ReferenciaColumn) = Convert.DBNull
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsCentroNull() As Boolean
            Return Me.IsNull(Me.tableDetalles.CentroColumn)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetCentroNull()
            Me(Me.tableDetalles.CentroColumn) = Convert.DBNull
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsOrigenNull() As Boolean
            Return Me.IsNull(Me.tableDetalles.OrigenColumn)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetOrigenNull()
            Me(Me.tableDetalles.OrigenColumn) = Convert.DBNull
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsEmisorNull() As Boolean
            Return Me.IsNull(Me.tableDetalles.EmisorColumn)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetEmisorNull()
            Me(Me.tableDetalles.EmisorColumn) = Convert.DBNull
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsResponsableNull() As Boolean
            Return Me.IsNull(Me.tableDetalles.ResponsableColumn)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetResponsableNull()
            Me(Me.tableDetalles.ResponsableColumn) = Convert.DBNull
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IsidTipoNull() As Boolean
            Return Me.IsNull(Me.tableDetalles.idTipoColumn)
        End Function

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SetidTipoNull()
            Me(Me.tableDetalles.idTipoColumn) = Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class DetallesRowChangeEvent
        Inherits EventArgs

        Private eventRow As DetallesRow

        Private eventAction As DataRowAction

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As DetallesRow, ByVal action As DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As DetallesRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <DebuggerNonUserCode(), _
         GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
